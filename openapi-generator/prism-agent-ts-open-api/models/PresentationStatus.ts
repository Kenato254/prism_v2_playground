/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.41.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProofRequestAux } from './ProofRequestAux';
import {
    ProofRequestAuxFromJSON,
    ProofRequestAuxFromJSONTyped,
    ProofRequestAuxToJSON,
} from './ProofRequestAux';

/**
 * The proof presentation record.
 * @export
 * @interface PresentationStatus
 */
export interface PresentationStatus {
    /**
     * The unique identifier of the presentation record.
     * @type {string}
     * @memberof PresentationStatus
     */
    presentationId: string;
    /**
     * The current state of the proof presentation record.
     * @type {string}
     * @memberof PresentationStatus
     */
    status: PresentationStatusStatusEnum;
    /**
     * The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)
     * @type {Array<ProofRequestAux>}
     * @memberof PresentationStatus
     */
    proofs: Array<ProofRequestAux>;
    /**
     * The list of proofs presented by the prover to the verifier.
     * @type {Array<string>}
     * @memberof PresentationStatus
     */
    data: Array<string>;
    /**
     * The unique identifier of an established connection between the verifier and the prover.
     * @type {string}
     * @memberof PresentationStatus
     */
    connectionId?: string;
}


/**
 * @export
 */
export const PresentationStatusStatusEnum = {
    RequestPending: 'RequestPending',
    RequestSent: 'RequestSent',
    RequestReceived: 'RequestReceived',
    RequestRejected: 'RequestRejected',
    PresentationPending: 'PresentationPending',
    PresentationGenerated: 'PresentationGenerated',
    PresentationSent: 'PresentationSent',
    PresentationReceived: 'PresentationReceived',
    PresentationVerified: 'PresentationVerified',
    PresentationAccepted: 'PresentationAccepted',
    PresentationRejected: 'PresentationRejected',
    ProblemReportPending: 'ProblemReportPending',
    ProblemReportSent: 'ProblemReportSent',
    ProblemReportReceived: 'ProblemReportReceived'
} as const;
export type PresentationStatusStatusEnum = typeof PresentationStatusStatusEnum[keyof typeof PresentationStatusStatusEnum];


/**
 * Check if a given object implements the PresentationStatus interface.
 */
export function instanceOfPresentationStatus(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "presentationId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "proofs" in value;
    isInstance = isInstance && "data" in value;

    return isInstance;
}

export function PresentationStatusFromJSON(json: any): PresentationStatus {
    return PresentationStatusFromJSONTyped(json, false);
}

export function PresentationStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): PresentationStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'presentationId': json['presentationId'],
        'status': json['status'],
        'proofs': ((json['proofs'] as Array<any>).map(ProofRequestAuxFromJSON)),
        'data': json['data'],
        'connectionId': !exists(json, 'connectionId') ? undefined : json['connectionId'],
    };
}

export function PresentationStatusToJSON(value?: PresentationStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'presentationId': value.presentationId,
        'status': value.status,
        'proofs': ((value.proofs as Array<any>).map(ProofRequestAuxToJSON)),
        'data': value.data,
        'connectionId': value.connectionId,
    };
}

