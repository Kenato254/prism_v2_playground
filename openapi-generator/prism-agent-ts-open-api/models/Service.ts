/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.41.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A service expressed in the DID document.
 * https://www.w3.org/TR/did-core/#services
 * @export
 * @interface Service
 */
export interface Service {
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    id: string;
    /**
     * Service type.
     * Can contain multiple possible values as described in the [Create DID operation](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#create-did) under the construction section.
     * 
     * *Known issue: This is currently misaligned with Prism DID method. This will be fixed in the future version of Prism Agent*
     * @type {string}
     * @memberof Service
     */
    type: ServiceTypeEnum;
    /**
     * Application service endpoints.
     * Can contain multiple possible values as described in the [Create DID operation](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#create-did) under the construction section.
     * 
     * *Known issue: This is currently misaligned with Prism DID method. This will be fixed in the future version of Prism Agent*
     * @type {Array<string>}
     * @memberof Service
     */
    serviceEndpoint: Array<string>;
}


/**
 * @export
 */
export const ServiceTypeEnum = {
    LinkedDomains: 'LinkedDomains'
} as const;
export type ServiceTypeEnum = typeof ServiceTypeEnum[keyof typeof ServiceTypeEnum];


/**
 * Check if a given object implements the Service interface.
 */
export function instanceOfService(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "serviceEndpoint" in value;

    return isInstance;
}

export function ServiceFromJSON(json: any): Service {
    return ServiceFromJSONTyped(json, false);
}

export function ServiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Service {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'serviceEndpoint': json['serviceEndpoint'],
    };
}

export function ServiceToJSON(value?: Service | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'serviceEndpoint': value.serviceEndpoint,
    };
}

