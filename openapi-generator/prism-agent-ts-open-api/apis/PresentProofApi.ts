/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent OpenAPI specification
 * OpenAPI specification for Decentralized Identifiers (DID) Operations
 *
 * The version of the OpenAPI document: 0.41.0
 * Contact: atala-coredid@iohk.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PresentationStatus,
  RequestPresentationAction,
  RequestPresentationInput,
  RequestPresentationOutput,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PresentationStatusFromJSON,
    PresentationStatusToJSON,
    RequestPresentationActionFromJSON,
    RequestPresentationActionToJSON,
    RequestPresentationInputFromJSON,
    RequestPresentationInputToJSON,
    RequestPresentationOutputFromJSON,
    RequestPresentationOutputToJSON,
} from '../models';

export interface GetPresentationRequest {
    recordId: string;
}

export interface RequestPresentationRequest {
    requestPresentationInput: RequestPresentationInput;
}

export interface UpdatePresentationRequest {
    recordId: string;
    requestPresentationAction: RequestPresentationAction;
}

/**
 * 
 */
export class PresentProofApi extends runtime.BaseAPI {

    /**
     * Gets the list of proof presentation records.
     */
    async getAllPresentationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PresentationStatus>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/present-proof/presentations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PresentationStatusFromJSON));
    }

    /**
     * Gets the list of proof presentation records.
     */
    async getAllPresentation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PresentationStatus>> {
        const response = await this.getAllPresentationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets an existing proof presentation record by its unique identifier. More information on the error can be found in the response body.
     */
    async getPresentationRaw(requestParameters: GetPresentationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PresentationStatus>> {
        if (requestParameters.recordId === null || requestParameters.recordId === undefined) {
            throw new runtime.RequiredError('recordId','Required parameter requestParameters.recordId was null or undefined when calling getPresentation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/present-proof/presentations/{recordId}`.replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters.recordId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PresentationStatusFromJSON(jsonValue));
    }

    /**
     * Gets an existing proof presentation record by its unique identifier. More information on the error can be found in the response body.
     */
    async getPresentation(requestParameters: GetPresentationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PresentationStatus> {
        const response = await this.getPresentationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * As a Verifier, create a new proof presentation request and send it to the Prover.
     */
    async requestPresentationRaw(requestParameters: RequestPresentationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestPresentationOutput>> {
        if (requestParameters.requestPresentationInput === null || requestParameters.requestPresentationInput === undefined) {
            throw new runtime.RequiredError('requestPresentationInput','Required parameter requestParameters.requestPresentationInput was null or undefined when calling requestPresentation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/present-proof/presentations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestPresentationInputToJSON(requestParameters.requestPresentationInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestPresentationOutputFromJSON(jsonValue));
    }

    /**
     * As a Verifier, create a new proof presentation request and send it to the Prover.
     */
    async requestPresentation(requestParameters: RequestPresentationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestPresentationOutput> {
        const response = await this.requestPresentationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the proof presentation record matching the unique identifier, with the specific action to perform.
     */
    async updatePresentationRaw(requestParameters: UpdatePresentationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.recordId === null || requestParameters.recordId === undefined) {
            throw new runtime.RequiredError('recordId','Required parameter requestParameters.recordId was null or undefined when calling updatePresentation.');
        }

        if (requestParameters.requestPresentationAction === null || requestParameters.requestPresentationAction === undefined) {
            throw new runtime.RequiredError('requestPresentationAction','Required parameter requestParameters.requestPresentationAction was null or undefined when calling updatePresentation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apikey"] = this.configuration.apiKey("apikey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/present-proof/presentations/{recordId}`.replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters.recordId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RequestPresentationActionToJSON(requestParameters.requestPresentationAction),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the proof presentation record matching the unique identifier, with the specific action to perform.
     */
    async updatePresentation(requestParameters: UpdatePresentationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePresentationRaw(requestParameters, initOverrides);
    }

}
